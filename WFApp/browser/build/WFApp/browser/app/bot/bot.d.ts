import './bot.scss';
import { TimeoutScheduler, AudioVideoFacade, AudioVideoObserver, ClientMetricReport, ContentShareObserver, DataMessage, DefaultBrowserBehavior, DeviceChangeObserver, EventAttributes, EventName, EventReporter, MeetingSession, MeetingSessionConfiguration, MeetingSessionStatus, MeetingSessionVideoAvailability, POSTLogger, VideoTileState, ClientVideoStreamReceivingReport } from '../../../../src/index';
export declare enum ContentShareType {
    ScreenCapture = 0,
    VideoFile = 1,
    CanvasCapture = 2
}
export declare class WorkoutBotApp implements AudioVideoObserver, DeviceChangeObserver, ContentShareObserver {
    static readonly BASE_URL: string;
    static readonly LOGGER_BATCH_SIZE: number;
    static readonly LOGGER_INTERVAL_MS: number;
    static readonly MAX_MEETING_HISTORY_MS: number;
    static readonly DATA_MESSAGE_TOPIC: string;
    static readonly DATA_MESSAGE_LIFETIME_MS: number;
    static readonly SIGNAL_MESSAGE_LIFETIME_MS: number;
    static readonly DataMessageTopicJoinClass: string;
    static readonly DATA_MESSAGE_TOPIC_VIDEO_PAUSE: string;
    static readonly DATA_MESSAGE_TOPIC_VIDEO_STATUS: string;
    static readonly DATA_MESSAGE_TOPIC_GET_VIDEO_STATUS: string;
    static readonly DATA_MESSAGE_TOPIC_PULSE_DATA: string;
    static readonly DATA_MESSAGE_TOPIC_MEMBER_MUSIC_STATUS: string;
    static readonly DATA_MESSAGE_TOPIC_ONE_BY_ONE_CHAT_STATUS: string;
    workoutId: string;
    bVirtualCoachWorkout: boolean;
    bWithoutCoach: boolean;
    bShowingRecordedCoachVideo: boolean;
    bTrainerJoined: boolean;
    taskId: string;
    timeLeft: number;
    classScheduleId: any;
    role: string;
    customerId: string;
    roomId: string;
    startTime: any;
    endTime: any;
    videoIndex: number;
    nextVideoElementIndex: number;
    videoElementIndex: number;
    videoCanvasContext: any;
    videoCanvas: HTMLCanvasElement;
    isWorkoutPaused: boolean;
    isWorkoutOver: boolean;
    contentStream: MediaStream;
    nextVideoTimeoutHandler: TimeoutScheduler;
    mainProcessTimeoutHandler: TimeoutScheduler;
    res_path: string;
    videoInfoList: any;
    videoList: any;
    videoInfo: any;
    workoutVideoElement: HTMLVideoElement;
    workoutNextVideoElement: HTMLVideoElement;
    currentVideoElement: HTMLVideoElement;
    coachVideoElement1: HTMLVideoElement;
    coachVideoElement2: HTMLVideoElement;
    currentCoachVideoElement: HTMLVideoElement;
    coachPreviewAudioElement: HTMLAudioElement;
    strNextVideoTitle: string;
    strVideoTitle: string;
    jsPlayFlag: boolean;
    curVideoPos: number;
    bStatusSwooshPlaying: boolean;
    tbackContext: any;
    tbackCanvas: any;
    tcanvas: any;
    tc: any;
    backCanvas: any;
    backContext: any;
    sbackContext: any;
    sbackCanvas: any;
    lrSignCanvas: any;
    lrSignContext: any;
    alSignCanvas: any;
    alSignContext: any;
    bTimerStarted: boolean;
    welcomeTime: number;
    bVideoPaused: boolean;
    bShowingNextVideoClip: boolean;
    bTimerActivated: boolean;
    bSwitchActivated: boolean;
    bPlayingCoachPreviewAudio: boolean;
    timerVideo: HTMLVideoElement;
    timerVideoForStretch: HTMLVideoElement;
    spinVideo: HTMLVideoElement;
    spinVideoForStretch: HTMLVideoElement;
    cw: number;
    ch: number;
    audioBoxingBell: HTMLAudioElement;
    audioBoxingBell6: HTMLAudioElement;
    audioSwooshLong: HTMLAudioElement;
    audioSwooshShort: HTMLAudioElement;
    audioWatchTick: HTMLAudioElement;
    audioBlip: HTMLAudioElement;
    audioBong: HTMLAudioElement;
    audioStretchGong: HTMLAudioElement;
    audioStretchThump: HTMLAudioElement;
    combinedStream: MediaStream;
    mediaStream: MediaStream;
    musicElement1: HTMLAudioElement;
    musicElement2: HTMLAudioElement;
    currentMusicElement: HTMLAudioElement;
    audioCtx: AudioContext;
    sourceNodeMusic1: any;
    sourceNodeMusic2: any;
    mixDestNode: MediaStreamAudioDestinationNode;
    songUrl: any;
    nextMusicElementIndex: number;
    musicElementIndex: number;
    imgt: any;
    imgb: any;
    imgLeftRightSign: any;
    imgAlternateSign: any;
    imgLogo: any;
    imgWhiteLogo: any;
    imgCustom: any;
    imgBottle: any;
    videoTimer: any;
    showActiveSpeakerScores: boolean;
    activeSpeakerLayout: boolean;
    meeting: string | null;
    name: string | null;
    voiceConnectorId: string | null;
    region: string | null;
    meetingSession: MeetingSession | null;
    audioVideo: AudioVideoFacade | null;
    canStartLocalVideo: boolean;
    defaultBrowserBehaviour: DefaultBrowserBehavior;
    roster: any;
    coachVideoVolume: number;
    memberMusicVolume: number;
    bPrivateChating: boolean;
    recordingFlag: boolean;
    cameraDeviceIds: string[];
    microphoneDeviceIds: string[];
    eventReporter: EventReporter | undefined;
    enableEventReporting: boolean;
    contentShareType: ContentShareType;
    enableWebAudio: boolean;
    enableSimulcast: boolean;
    markdown: any;
    lastMessageSender: string | null;
    lastReceivedMessageTimestamp: number;
    meetingSessionPOSTLogger: POSTLogger;
    meetingEventPOSTLogger: POSTLogger;
    api_base_url: any;
    constructor();
    updatePulseData(): Promise<void>;
    decode(s: string): string;
    AccessValueOfQueryString(): any;
    endVideo(): void;
    playPreviewAudio(): void;
    setupEventReporter(configuration: MeetingSessionConfiguration): Promise<EventReporter>;
    private isLocalHost;
    playNextVideoClip(): void;
    playNextVideo(): void;
    initializeElements(): void;
    prepareImageSign(sbc: any, img: any, signWidth: any): void;
    startPlayingVideo(): void;
    mainProcess(): void;
    findNextVideoIndex(index: number): number;
    findNextMusicIndex(index: number, songUrl: string): number;
    renderNextVideoTitle(c: any, w: any): void;
    renderVideoTitle(c: any, w: any): void;
    drawImageOnCanvas(img: any, bCoachArea?: any): void;
    clearCanvas(position?: boolean): void;
    drawOnCanvas(): void;
    drawNextVideoClip(c: any, w: any, h: any, nv: any): void;
    getTrainerVideos(): Promise<void>;
    stopBot(): Promise<void>;
    getClassScheduleDetail(): Promise<void>;
    calcVolume(volume: number): number;
    initParameters(): void;
    startProcess(): void;
    getSupportedMediaRegions(): Array<string>;
    getNearestMediaRegion(): Promise<string>;
    setMediaRegion(): void;
    showProgress(id: string): void;
    hideProgress(id: string): void;
    switchToFlow(flow: string): void;
    audioInputsChanged(_freshAudioInputDeviceList: MediaDeviceInfo[]): void;
    videoInputsChanged(_freshVideoInputDeviceList: MediaDeviceInfo[]): void;
    audioOutputsChanged(_freshAudioOutputDeviceList: MediaDeviceInfo[]): void;
    audioInputStreamEnded(deviceId: string): void;
    videoInputStreamEnded(deviceId: string): void;
    estimatedDownlinkBandwidthLessThanRequired(estimatedDownlinkBandwidthKbps: number, requiredVideoDownlinkBandwidthKbps: number): void;
    videoNotReceivingEnoughData(videoReceivingReports: ClientVideoStreamReceivingReport[]): void;
    metricsDidReceive(clientMetricReport: ClientMetricReport): void;
    createLogStream(configuration: MeetingSessionConfiguration, pathname: string): Promise<void>;
    eventDidReceive(name: EventName, attributes: EventAttributes): void;
    initializeMeetingSession(configuration: MeetingSessionConfiguration): Promise<void>;
    setClickHandler(elementId: string, f: () => void): void;
    join(): Promise<void>;
    leave(): void;
    updateProperty(obj: any, key: string, value: string): void;
    setupSubscribeToAttendeeIdPresenceHandler(): void;
    dataMessageHandler(dataMessage: DataMessage): void;
    setupDataMessage(): void;
    resetCanvasSize(): void;
    joinMeeting(): Promise<any>;
    endMeeting(): Promise<any>;
    populateDeviceList(elementId: string, genericName: string, devices: MediaDeviceInfo[], additionalOptions: string[]): void;
    populateInMeetingDeviceList(elementId: string, genericName: string, devices: MediaDeviceInfo[], additionalOptions: string[], callback: (name: string) => void): void;
    createDropdownMenuItem(menu: HTMLDivElement, title: string, clickHandler: () => void, id?: string): HTMLButtonElement;
    populateAudioInputList(): Promise<void>;
    populateVideoInputList(): Promise<void>;
    populateAudioOutputList(): Promise<void>;
    openAudioInputFromSelection(): Promise<void>;
    openAudioOutputFromSelection(): Promise<void>;
    private selectedVideoInput;
    openVideoInputFromSelection(selection: string | null, showPreview: boolean): Promise<void>;
    private audioInputSelectionToDevice;
    private videoInputSelectionToDevice;
    private contentShareTypeChanged;
    private contentShareStart;
    authenticate(): Promise<string>;
    log(str: string): void;
    audioVideoDidStartConnecting(reconnecting: boolean): void;
    audioVideoDidStart(): void;
    audioVideoDidStop(sessionStatus: MeetingSessionStatus): void;
    videoTileDidUpdate(tileState: VideoTileState): void;
    videoTileWasRemoved(tileId: number): void;
    videoAvailabilityDidChange(availability: MeetingSessionVideoAvailability): void;
    connectionDidBecomePoor(): void;
    connectionDidSuggestStopVideo(): void;
    connectionDidBecomeGood(): void;
    videoSendDidBecomeUnavailable(): void;
    contentShareDidStart(): void;
    contentShareDidStop(): void;
    contentShareDidPause(): void;
    contentShareDidUnpause(): void;
}
